# SwarmBot Test Suite Audit and Cleanup

## Project Overview
Comprehensive audit of all test files in the SwarmBot tests directory to ensure test suite quality and maintainability.

## Objectives
1. Audit all test files in the tests directory
2. Verify each test runs successfully
3. Fix broken tests or identify why they fail
4. Remove obsolete or redundant tests
5. Document test coverage and purpose
6. Ensure proper organization and naming conventions

## Test Categories to Audit

### 1. Main Test Files (45+ files)
- AsyncIO related tests (test_asyncio_*.py)
- Dashboard tests (test_dashboard_*.py)
- WebSocket tests (test_websocket_*.py)
- Configuration tests (test_config*.py)
- Fix verification tests (*_fix.py)
- Integration tests
- Unit tests
- Validation scripts

### 2. Test Subdirectories
- archive/ - Old websocket tests (determine if needed)
- integration/ - Integration test suite
- mcp/ - MCP-specific tests
- unit/ - Unit test suite

### 3. Utility Scripts
- run_*.py scripts
- verify_*.py scripts
- validate_*.py scripts

## Audit Process for Each Test

1. **Run Test**: Execute test file and capture results
2. **Analyze Results**:
   - If passes: Document purpose and coverage
   - If fails: Identify root cause
   - If obsolete: Mark for removal
3. **Fix or Remove**:
   - Fix import issues
   - Update deprecated code
   - Remove redundant tests
4. **Document**: Update test documentation

## Success Criteria
- All retained tests pass successfully
- No redundant or obsolete tests remain
- Clear documentation of test purpose
- Proper organization by category
- Clean test execution without warnings

## Technical Requirements
- Python 3.13 compatibility
- Proper path references from tests/ directory
- No circular imports
- Clean pytest execution
- No hardcoded paths

## Deliverables
1. Working test suite with all tests passing
2. Removed obsolete tests
3. Test audit report documenting:
   - Test purpose and coverage
   - Tests removed and why
   - Tests fixed and what was changed
4. Updated test organization structure
5. Test execution guide

## Priority Order
1. Critical path tests (imports, config, basic functionality)
2. Fix verification tests
3. Integration tests
4. WebSocket tests
5. UI/Dashboard tests
6. Utility and validation scripts
7. Archive and deprecated tests
